AppType=JavaFX
Build1=Default,b4j.example
File1=b4x_bridge.zip
File2=Layout1.bjl
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=javaobject
Library2=jcore
Library3=jfx
Library4=jnetwork
Library5=jrandomaccessfile
Library6=jshell
Library7=jxui
Library8=b4xcollections
Module1=PyBridge
Module2=PyComm
Module3=PyImport
Module4=PyUtils
Module5=PyWrapper
NumberOfFiles=2
NumberOfLibraries=8
NumberOfModules=5
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region
#MergeLibraries: false
Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Private Button1 As B4XView
	Private Py As PyBridge
	Private Time As Long
	Private Test As PyWrapper
	Private WebView1 As WebView
	Type OcrPoint (X As Int, Y As Int)
	Type OcrResult (Points As List, Text As String, Score As Double)
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Layout1")
	MainForm.Show
	Py.Initialize(Me, "Bridge")
	Start
End Sub

Sub Button1_Click
	
End Sub

Private Sub Bridge_Disconnected
	Log("Disconnected")
End Sub

Private Sub Start
	Dim opt As PyOptions = Py.CreateOptions("D:\python\python\python.exe")
'	opt.LocalPort = 53271
'	opt.PythonExecutable = ""
	opt.ForceCopyBridgeSrc = True
	Py.Start(opt)
	Wait For Bridge_Connected
	Wait For (RegisterOcrTypes) Complete (Unused As PyWrapper)
	Dim reader As PyWrapper = CreateOcrReader(Array("en"))
	Wait For (Py.Flush) Complete (u As Boolean)
	Wait For (Py.Flush) Complete (u As Boolean)
	Wait For (Py.Flush) Complete (u As Boolean)
	Sleep(0)
	Wait For (Py.Flush) Complete (u As Boolean)
	Wait For (Py.Flush) Complete (u As Boolean)
	Wait For (Py.Flush) Complete (u As Boolean)
	Log(u)
	Py.Utils.Print(reader)
	Wait For (OcrRead(reader, "C:\Users\H\Downloads\Clipboard Image.jpg")) Complete (Result As PyWrapper)
	Dim rows As List = Result.Value
	Log(rows)
End Sub

Private Sub RegisterOcrTypes As ResumableSub
	Dim Code As String = $"
from dataclasses import dataclass
@dataclass
class OcrPoint:
	X: int
	Y: int
	def __post_init__(self):
		self.X = int(self.X)
		self.Y = int(self.Y)

@dataclass
class OcrResult:
	Points: list
	Text: str
	Score: float
	def __init__ (self, ocr):
		self.Points = [OcrPoint(p[0], p[1]) for p in ocr[0]]
		self.Text = ocr[1]
		self.Score = ocr[2]
		
def RegisterOcrTypes(bridge):
	bridge.comm.serializator.add_type(OcrPoint)
	bridge.comm.serializator.add_type(OcrResult)
"$
	Wait For (Py.Utils.RunCode("RegisterOcrTypes", Array(Py.Bridge), Code).Fetch) Complete (Result As PyWrapper)
	Return Result
End Sub


Private Sub CreateOcrReader(Languages As List) As PyWrapper
	Dim Code As String = $"
import easyocr
def CreateOcrReader(Languages):
	return easyocr.Reader(Languages)
"$
	Return Py.Utils.RunCode("CreateOcrReader", Array(Languages), Code)
End Sub

Private Sub OcrRead(Reader As PyWrapper, Path As String) As ResumableSub
	Dim Code As String = $"
def OcrRead(reader, path):
	res = reader.readtext(path)
	return [OcrResult(row) for row in res]
"$
	Wait For (Py.Utils.RunCode("OcrRead", Array(Reader, Path), Code).Fetch) Complete (Result As PyWrapper)
	Return Result
End Sub



Private Sub Bridge_Event (Name As String, Params As Map)
	Dim key As Int = Params.Get("key1")
	Dim o As PyObject
	o.Key = key
	Dim w As PyWrapper
	w.Initialize(Py, o)
	Py.Utils.Print(w)
End Sub

