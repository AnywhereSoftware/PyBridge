AppType=JavaFX
Build1=Default,b4j.example
File1=b4x_bridge.zip
File2=Layout1.bjl
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=b4xcollections
Library2=javaobject
Library3=jcore
Library4=jfx
Library5=jnetwork
Library6=jokhttputils2
Library7=jrandomaccessfile
Library8=jxui
Library9=jshell
Module1=PyBridge
Module2=PyComm
Module3=PyImport
Module4=PyUtils
Module5=PyWrapper
NumberOfFiles=2
NumberOfLibraries=9
NumberOfModules=5
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region
#MergeLibraries: false
Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Private Button1 As B4XView
	Private Py As PyBridge
	Private Time As Long
	Private Test As PyWrapper
	Private WebView1 As WebView
	Type DynamicClass (Name As String, Age As Int, IsStudent As Boolean, TTT As Boolean)
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Layout1")
	MainForm.Show
	Py.Initialize(Me, "Bridge")
	Start
End Sub

Sub Button1_Click
	ExitApplication
End Sub

Private Sub Bridge_Disconnected
	Log("Running time: " & (DateTime.Now - Time))
End Sub

Private Sub Start
	Dim opt As PyOptions = Py.CreateOptions("D:\python\python\python.exe")
'	opt.LocalPort = 53271
	opt.ForceCopyBridgeSrc = True
'	opt.PythonExecutable = ""
	Py.Start(opt)
	Wait For Bridge_Connected
	Dim reader As PyWrapper = CreateOcrReader(Array("en"))
	Py.Utils.Print(Py.Utils.EvalGlobals.Run("__getitem__", Array("xxx")).GetField("model_storage_directory"))
End Sub


Private Sub CreateOcrReader(Languages As List) As PyWrapper
	Return Py.Utils.RunFunction("CreateOcrReader", Array(Languages), Null, _
$"
xxx = None
import easyocr
def CreateOcrReader(Languages):
	global xxx
	xxx = easyocr.Reader(Languages)
	
"$)
End Sub

Private Sub OcrRead(Reader As PyWrapper, Path As String) As PyWrapper
	Return Py.Utils.RunFunction("OcrRead", Array(Reader, Path), Null, _
$"
def OcrRead(reader, path):
	reader = xxx
	return reader.readtext(path)
"$)
End Sub



Private Sub Bridge_Event (Name As String, Params As Map)
	Dim key As Int = Params.Get("key1")
	Dim o As PyObject
	o.Key = key
	Dim w As PyWrapper
	w.Initialize(Py, o)
	Py.Utils.Print(w)
End Sub




Public Sub CreateDynamicClass (Name As String, Age As Int, IsStudent As Boolean) As DynamicClass
	Dim t1 As DynamicClass
	t1.Initialize
	t1.Name = Name
	t1.Age = Age
	t1.IsStudent = IsStudent
	t1.TTT = True
	Return t1
End Sub